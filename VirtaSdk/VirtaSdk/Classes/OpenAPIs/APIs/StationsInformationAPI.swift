//
// StationsInformationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension VirtaSdkAPI {


open class StationsInformationAPI {
    /**
     /stations
     
     - parameter lastUpdate: (query)  (optional)
     - parameter latMin: (query)  (optional)
     - parameter latMax: (query)  (optional)
     - parameter longMin: (query)  (optional)
     - parameter longMax: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter privilegedStations: (query) 0/1 or omitted (optional)
     - parameter includePoi: (query) 0/1 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETStations(lastUpdate: String? = nil, latMin: Double? = nil, latMax: Double? = nil, longMin: Double? = nil, longMax: Double? = nil, from: Int? = nil, limit: Int? = nil, privilegedStations: Int? = nil, includePoi: Int? = nil, completion: @escaping ((_ data: [BasicStationInfo]?,_ error: Error?) -> Void)) {
        gETStationsWithRequestBuilder(lastUpdate: lastUpdate, latMin: latMin, latMax: latMax, longMin: longMin, longMax: longMax, from: from, limit: limit, privilegedStations: privilegedStations, includePoi: includePoi).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     /stations
     
     - parameter lastUpdate: (query)  (optional)
     - parameter latMin: (query)  (optional)
     - parameter latMax: (query)  (optional)
     - parameter longMin: (query)  (optional)
     - parameter longMax: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter privilegedStations: (query) 0/1 or omitted (optional)
     - parameter includePoi: (query) 0/1 (optional)
     - parameter completion: completion handler to receive the result
     */
    open class func gETStations(lastUpdate: String? = nil, latMin: Double? = nil, latMax: Double? = nil, longMin: Double? = nil, longMax: Double? = nil, from: Int? = nil, limit: Int? = nil, privilegedStations: Int? = nil, includePoi: Int? = nil, completion: @escaping ((_ result: Result<[BasicStationInfo], Error>) -> Void)) {
        gETStationsWithRequestBuilder(lastUpdate: lastUpdate, latMin: latMin, latMax: latMax, longMin: longMin, longMax: longMax, from: from, limit: limit, privilegedStations: privilegedStations, includePoi: includePoi).execute { (response, error) -> Void in
            if let error = error {
                completion(.failure(error))
            } else if let response = response {
                completion(.success(response.body!))
            } else {
                fatalError()
            }
        }
    }

    /**
     /stations
     - GET /stations
     - Function to retrieve basic information of all stations regardless of networks (Virta, Hubject, etc.).  If the auhorization header is defined, this function will also return private stations that are visible to that customer account.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter lastUpdate: (query)  (optional)
     - parameter latMin: (query)  (optional)
     - parameter latMax: (query)  (optional)
     - parameter longMin: (query)  (optional)
     - parameter longMax: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter privilegedStations: (query) 0/1 or omitted (optional)
     - parameter includePoi: (query) 0/1 (optional)
     - returns: RequestBuilder<[BasicStationInfo]> 
     */
    open class func gETStationsWithRequestBuilder(lastUpdate: String? = nil, latMin: Double? = nil, latMax: Double? = nil, longMin: Double? = nil, longMax: Double? = nil, from: Int? = nil, limit: Int? = nil, privilegedStations: Int? = nil, includePoi: Int? = nil) -> RequestBuilder<[BasicStationInfo]> {
        let path = "/stations"
        let URLString = VirtaSdkAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "lastUpdate": lastUpdate?.encodeToJSON(), 
            "latMin": latMin?.encodeToJSON(), 
            "latMax": latMax?.encodeToJSON(), 
            "longMin": longMin?.encodeToJSON(), 
            "longMax": longMax?.encodeToJSON(), 
            "from": from?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "privilegedStations": privilegedStations?.encodeToJSON(), 
            "includePoi": includePoi?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BasicStationInfo]>.Type = VirtaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /stations/{id}
     
     - parameter id: (path)  
     - parameter provider: (query) The station id&#39;s can overlap, so we can define the database table that we try to fetch the data. Values are Hubject/Poi/Virta or omitted which will try to fetch from Virta and then Hubject (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETStationsId(id: Int, provider: String? = nil, completion: @escaping ((_ data: Station?,_ error: Error?) -> Void)) {
        gETStationsIdWithRequestBuilder(id: id, provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     /stations/{id}
     
     - parameter id: (path)  
     - parameter provider: (query) The station id&#39;s can overlap, so we can define the database table that we try to fetch the data. Values are Hubject/Poi/Virta or omitted which will try to fetch from Virta and then Hubject (optional)
     - parameter completion: completion handler to receive the result
     */
    open class func gETStationsId(id: Int, provider: String? = nil, completion: @escaping ((_ result: Result<Station, Error>) -> Void)) {
        gETStationsIdWithRequestBuilder(id: id, provider: provider).execute { (response, error) -> Void in
            if let error = error {
                completion(.failure(error))
            } else if let response = response {
                completion(.success(response.body!))
            } else {
                fatalError()
            }
        }
    }

    /**
     /stations/{id}
     - GET /stations/{id}
     - Function to retrieve all information the station with specific `stationId`.  If the authorization header is defined, this function will return station's pricing according to that customer account. Otherwise, it will return public pricing if available.
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter id: (path)  
     - parameter provider: (query) The station id&#39;s can overlap, so we can define the database table that we try to fetch the data. Values are Hubject/Poi/Virta or omitted which will try to fetch from Virta and then Hubject (optional)
     - returns: RequestBuilder<Station> 
     */
    open class func gETStationsIdWithRequestBuilder(id: Int, provider: String? = nil) -> RequestBuilder<Station> {
        var path = "/stations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = VirtaSdkAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "provider": provider?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Station>.Type = VirtaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
