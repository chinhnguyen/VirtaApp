//
// AuthenticationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension VirtaSdkAPI {


open class AuthenticationAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dELETEAuth(completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        dELETEAuthWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**

     - parameter completion: completion handler to receive the result
     */
    open class func dELETEAuth(completion: @escaping ((_ result: Result<InlineResponse2001, Error>) -> Void)) {
        dELETEAuthWithRequestBuilder().execute { (response, error) -> Void in
            if let error = error {
                completion(.failure(error))
            } else if let response = response {
                completion(.success(response.body!))
            } else {
                fatalError()
            }
        }
    }

    /**
     - DELETE /auth
     - Endpoint to invalidate/ revoke a token
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func dELETEAuthWithRequestBuilder() -> RequestBuilder<InlineResponse2001> {
        let path = "/auth"
        let URLString = VirtaSdkAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = VirtaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     /auth
     
     - parameter contentType: (header)  (optional)
     - parameter brand: (header)  (optional)
     - parameter brand2: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pOSTAuth(contentType: String? = nil, brand: String? = nil, brand2: String? = nil, body: InlineObject? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        pOSTAuthWithRequestBuilder(contentType: contentType, brand: brand, brand2: brand2, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    /**
     /auth
     
     - parameter contentType: (header)  (optional)
     - parameter brand: (header)  (optional)
     - parameter brand2: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    open class func pOSTAuth(contentType: String? = nil, brand: String? = nil, brand2: String? = nil, body: InlineObject? = nil, completion: @escaping ((_ result: Result<InlineResponse200, Error>) -> Void)) {
        pOSTAuthWithRequestBuilder(contentType: contentType, brand: brand, brand2: brand2, body: body).execute { (response, error) -> Void in
            if let error = error {
                completion(.failure(error))
            } else if let response = response {
                completion(.success(response.body!))
            } else {
                fatalError()
            }
        }
    }

    /**
     /auth
     - POST /auth
     - The Auth endpoint is used to authenticate the end-user with the system to ensure in their identity. The Auth endpoint issues an unique expiring JWT token to verify the identity for future API requests.  This call will update customer's last_token_generated timestamp.
     - parameter contentType: (header)  (optional)
     - parameter brand: (header)  (optional)
     - parameter brand2: (header)  (optional)
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func pOSTAuthWithRequestBuilder(contentType: String? = nil, brand: String? = nil, brand2: String? = nil, body: InlineObject? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/auth"
        let URLString = VirtaSdkAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType?.encodeToJSON(),
            "brand": brand?.encodeToJSON(),
            "Brand": brand2?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = VirtaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
}
